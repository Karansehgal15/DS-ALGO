// C++ program for implementation of Ford Fulkerson algorithm 
#include <iostream> 
#include <limits.h> 
#include <string.h> 
#include <queue> 
using namespace std; 



bool bfs(int **rGraph, int s, int t, int parent[] ,int V) 
{ 
	
	bool visited[V]={0};
	queue <int> q; q.push(s); 
	visited[s] = true; parent[s] = -1; 

	while (!q.empty()) 
	{ 
		int u = q.front(); q.pop(); 
		for (int v=0; v<V; v++) 
		{ 
			if (visited[v]==false && rGraph[u][v] > 0) 
			{ 
				q.push(v); parent[v] = u; visited[v] = true; 
				if(v==t)
				{   return true;}
			} 
		} 
	} 
	return false; 
} 

int fordFulkerson(int **graph, int s, int t,int V) 
{ 
	int u, v; 
	int **rGraph=new int*[V]; 
	for (u = 0; u < V; u++){
	    rGraph[u]=new int[V];
		for (v = 0; v < V; v++) 
			rGraph[u][v] = graph[u][v]; 
    }
	int parent[V]; 
	int max_flow = 0; 
	while (bfs(rGraph, s, t, parent, V)) 
	{ 
		int path_flow = INT_MAX; 
		for (v=t; v!=s; v=parent[v]) 
		{   u = parent[v]; path_flow = min(path_flow, rGraph[u][v]); } 

		for (v=t; v != s; v=parent[v]) 
		{ 
			u = parent[v]; 
			rGraph[u][v] -= path_flow; rGraph[v][u] += path_flow; 
		} 
		max_flow += path_flow; 
	} 
	return max_flow; 
} 

// Driver program to test above functions 


int main() {
    int t;
    cin>>t;
    while(t--){
    int v,e;  cin>>v>>e;
    int **capacity = new int*[v];  //adjacency matrix 
    for(int i=0;i<v;i++){
        capacity[i]= new int[v];
    }
    for(int i=0;i<e;i++){
        int u,v,c;  cin>>u>>v>>c;   u--; v--;   capacity[u][v] = c;}
    cout<<fordFulkerson(capacity,0,v-1,v)<<endl;
    }
    return 0;
}
